<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>conf</title>
      <link href="/2024/12/06/conf/"/>
      <url>/2024/12/06/conf/</url>
      
        <content type="html"><![CDATA[<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。以下是预先定义的参数，您可以在模板中使用这些参数值：</p><table><thead><tr><th>参数</th><th>描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td align="left">post</td></tr><tr><td>title</td><td>标题</td><td align="left"></td></tr><tr><td>date</td><td>建立日期</td><td align="left">文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td align="left">文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td align="left">true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td align="left"></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td align="left"></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td align="left"></td></tr><tr><td>excerpt</td><td>纯文本的页面摘要</td><td align="left"></td></tr><tr><td>disableNunjucks</td><td>启用渲染引擎</td><td align="left">false</td></tr><tr><td>lang</td><td>设置语言</td><td align="left">默认语言</td></tr><tr><td>sticky</td><td>文章置顶</td><td align="left">0</td></tr><tr><td>cover</td><td>文章封面</td><td align="left"></td></tr><tr><td>comments</td><td>显示文章评论模块</td><td align="left">true</td></tr><tr><td>copyright</td><td>显示文章版权模块</td><td align="left">true</td></tr><tr><td>mathjax</td><td>显示mathjax</td><td align="left">false</td></tr><tr><td>katex</td><td>显示katex</td><td align="left">false</td></tr><tr><td>aside</td><td>显示侧边栏</td><td align="left">true</td></tr><tr><td>aplayer</td><td>在该页面下加载aplayer的js和css</td><td align="left">false</td></tr><tr><td>highlight_shrink</td><td>代码框是否展开</td><td align="left">false</td></tr><tr><td>toc</td><td>是否显示文章目录</td><td align="left">false</td></tr><tr><td>copyright_author: xxxx</td><td></td><td align="left"></td></tr><tr><td>copyright_author_href: <a href="https://xxxxxx.com/">https://xxxxxx.com</a></td><td></td><td align="left"></td></tr><tr><td>copyright_url: <a href="https://xxxxxx.com/">https://xxxxxx.com</a></td><td></td><td align="left"></td></tr><tr><td>copyright_info: 此文章版權歸 xxxxx 所有，如有轉載，請註明來自原作者</td><td></td><td align="left"></td></tr></tbody></table><h1 id="需要完善的部分"><a href="#需要完善的部分" class="headerlink" title="需要完善的部分"></a>需要完善的部分</h1><ul><li>评论功能</li><li>在线聊天功能</li><li>分析功能</li><li>在线修改功能</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 主页配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM2DB</title>
      <link href="/2024/12/03/LLM2DB/"/>
      <url>/2024/12/03/LLM2DB/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM2CSQL"><a href="#LLM2CSQL" class="headerlink" title="LLM2CSQL"></a>LLM2CSQL</h1><ul><li><a href="/files/LLM2SQL/NL2SQL-VLDB2024.pdf">ZNL2SQL</a></li><li><a href="/files/LLM2SQL/NL2SQL360-VLDB2024.pdf">NL2SQL-VLDB2024</a></li><li><a href="/files/LLM2SQL/query_rewrite.pdf">queryrewrite</a></li></ul><h1 id="thought"><a href="#thought" class="headerlink" title="thought"></a>thought</h1><p>看完上述文章的思考，如何将LLM2SQL的思路迁移到LLM2CYPHER上？</p><h3 id="LLM2CYPHER"><a href="#LLM2CYPHER" class="headerlink" title="LLM2CYPHER"></a>LLM2CYPHER</h3><ol><li><strong>用小模型来将自然语言转换为规范的查询自然语言增加转换准确性</strong></li></ol><p>查询目标：n1,n2,n3 &#x2F;&#x2F;查询中的实体<br>查询关系：n1-r1-n2 ….. &#x2F;&#x2F;查询中实体的关系<br>返回结果：result &#x2F;&#x2F;查询语句中的结果</p><p>例如：小丽的朋友的朋友有哪些</p><ul><li>查询目标：小丽，小丽的朋友，小丽的朋友的朋友</li><li>查询关系：小丽-朋友-小丽的朋友，小丽的朋友-朋友-小丽的朋友的朋友</li><li>返回结果：小丽的朋友的朋友</li></ul><ol start="2"><li><p><strong>多专家评判机制</strong><br>使用多个大模型专家进行nl2cypher，每个专家生成的cypher和原先的自然语言一起交给标号i+1的大模型专家，让其评判正确率，并且自己在根据自然语言生成cypher，与前一个专家转交的cypher进行比对，给予每个大模型专家不同的权重，当每个大模型一致认为正确时，转换完成</p></li><li><p><strong>自适应学习机制</strong><br>添加自适应学习机制，并且给与不同专家不同的权重，例如某个专业侧重于整体结构，或者是数据类型等</p></li><li><p><strong>物化视图缓存机制</strong><br>给上述的方案增添一种类似物化视图的结构，用来保存经过小模型转换的标准自然语言转换为的认为正确的cypher。在每次nltocypher的时候:</p></li></ol><ul><li>先经过小模型的转换</li><li>去查看物化视图中是否有保存</li><li>若有则可以直接使用，或者取出让大模型专家进行评判</li><li>若正确率低则需重新生成，否则则认为正确</li></ul><p>可以对自然语言进行模糊匹配，找出结构相同的自然语言。比如”有多少奥迪车辆”和”有多少宝马车辆”很类似，可以使用前面的缓存交给专门进行标签匹配的大模型专家进行修改。</p><ol start="5"><li><p><strong>强化学习优化</strong><br>使用强化学习来自适应改变大语言模型专家的权重，或者根据执行结果反馈给专家，让其调整权重。</p></li><li><p><strong>标签处理专家</strong><br>cypher的标签很重要，可以使用不同的大模型处理不同的部分，处理标签，具体的参数。</p></li></ol><h3 id="Rewrite-Cypher"><a href="#Rewrite-Cypher" class="headerlink" title="Rewrite Cypher"></a>Rewrite Cypher</h3><ol><li>因为cypher的连接顺序会十分影响查询效率，所以需要对cypher进行重写，例如：</li></ol><ul><li>原cypher：MATCH (n1)-[r1]-&gt;(n2)-[r2]-&gt;(n3) RETURN n1,n2,n3</li><li>重写cypher：MATCH (n3)&lt;-[r2]-(n2)&lt;-[r1]-(n1) RETURN n1,n2,n3</li></ul><ol start="2"><li>如何判断cypher的连接顺序是否合理？</li></ol><ul><li>使用图数据库的执行引擎，执行cypher，并记录执行时间，选择执行时间最短的连接顺序&#x2F;问题在于需要执行cypher，才能知道执行时间，不能在转换阶段就进行判断</li><li>使用强化学习预训练,在转换阶段就进行判断</li><li>使用启发式算法，根据cypher的结构，判断连接顺序是否合理。启发式算法是一种在合理时间内找到较好解决方案的方法，它不一定能找到最优解，但可以找到接近最优解的答案。在cypher重写中，可以考虑以下启发式规则：<ol><li>选择性原则：优先处理可以快速缩小结果集的条件，如带有索引或约束的节点</li><li>局部性原则：尽量将相关的操作放在一起处理，减少数据在内存中的移动</li><li>基数估计：根据节点和关系的数量来估计中间结果的大小，选择产生较小中间结果的执行顺序</li><li>模式匹配：识别常见的查询模式并应用已知的优化策略<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CypherRewriter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, graph_stats</span>):</span><br><span class="line">        <span class="comment"># 图数据库统计信息，包含节点标签和关系类型的基数信息</span></span><br><span class="line">        <span class="variable language_">self</span>.graph_stats = graph_stats</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">estimate_selectivity</span>(<span class="params">self, pattern</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;估算模式的选择性（越小越好）&quot;&quot;&quot;</span></span><br><span class="line">        node_label = pattern.get(<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        relationship = pattern.get(<span class="string">&#x27;relationship&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从统计信息中获取基数</span></span><br><span class="line">        node_cardinality = <span class="variable language_">self</span>.graph_stats[<span class="string">&#x27;nodes&#x27;</span>].get(node_label, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">        rel_cardinality = <span class="variable language_">self</span>.graph_stats[<span class="string">&#x27;relationships&#x27;</span>].get(relationship, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算选择性分数（越小表示越具有选择性）</span></span><br><span class="line">        <span class="keyword">return</span> (node_cardinality + rel_cardinality) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rewrite_cypher</span>(<span class="params">self, cypher_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重写Cypher查询以优化执行顺序&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 解析查询模式</span></span><br><span class="line">        patterns = <span class="variable language_">self</span>._parse_patterns(cypher_query)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算每个模式的选择性</span></span><br><span class="line">        pattern_scores = [</span><br><span class="line">            (pattern, <span class="variable language_">self</span>.estimate_selectivity(pattern))</span><br><span class="line">            <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据选择性排序（选择性高的优先）</span></span><br><span class="line">        sorted_patterns = <span class="built_in">sorted</span>(pattern_scores, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重建优化后的查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._rebuild_query(sorted_patterns, cypher_query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_patterns</span>(<span class="params">self, cypher_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析Cypher查询中的模式</span></span><br><span class="line"><span class="string">        示例: MATCH (n:Person)-[r:KNOWS]-&gt;(m:Person) </span></span><br><span class="line"><span class="string">        会被解析为多个模式组件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 这里需要实现具体的解析逻辑</span></span><br><span class="line">        <span class="comment"># 返回解析后的模式列表</span></span><br><span class="line">        patterns = []</span><br><span class="line">        <span class="comment"># ... 解析逻辑 ...</span></span><br><span class="line">        <span class="keyword">return</span> patterns</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_rebuild_query</span>(<span class="params">self, sorted_patterns, original_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据排序后的模式重建查询&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 重建优化后的查询字符串</span></span><br><span class="line">        <span class="comment"># ... 重建逻辑 ...</span></span><br><span class="line">        <span class="keyword">return</span> optimized_query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">graph_stats = &#123;</span><br><span class="line">    <span class="string">&#x27;nodes&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Person&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&#x27;Company&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;relationships&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;KNOWS&#x27;</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="string">&#x27;WORKS_AT&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewriter = CypherRewriter(graph_stats)</span><br><span class="line">query = <span class="string">&quot;MATCH (n:Person)-[r:KNOWS]-&gt;(m:Person)-[w:WORKS_AT]-&gt;(c:Company) RETURN n,m,c&quot;</span></span><br><span class="line">optimized_query = rewriter.rewrite_cypher(query)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="将自动补全技术融入到LLM2SQL中提高可信度"><a href="#将自动补全技术融入到LLM2SQL中提高可信度" class="headerlink" title="将自动补全技术融入到LLM2SQL中提高可信度"></a>将自动补全技术融入到LLM2SQL中提高可信度</h3><p>在转换阶段生成了类似的模板之后，可以使用自动补全的算法来判断是否数据库中含有相应的结构，如果没有那么它肯定是错误的，若有也不能说是正确的，但是可信度会提高很多。<br>当然因为会提供给大模型Scheme，所以不需要真的使用数据库来进行自动补全，只需要根据Scheme进行判断即可。</p><h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><h2 id="ZNL2SQL"><a href="#ZNL2SQL" class="headerlink" title="ZNL2SQL"></a>ZNL2SQL</h2><p>-<a href="/files/LLM2SQL/ZNL2SQL-VLDB2024.pptx">ZNL2SQL</a></p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ppt中的多级匹配函数实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value_match</span>(<span class="params">db, question, gold_sql, pred_sql, table, column, pred_value, match_method, k</span>):</span><br><span class="line">    item = Item(db, table, column, pred_value)</span><br><span class="line">    pred_value = <span class="built_in">str</span>(pred_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(item.db) <span class="keyword">as</span> conn:</span><br><span class="line">        conn.text_factory = <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">        score, candidate = search_in_column(conn, item, match_method, k)</span><br><span class="line">        max_score = score[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(candidate[<span class="number">0</span>]).strip().lower() == pred_value.strip().lower():</span><br><span class="line">            <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        table_score, table_column, table_candidate = search_in_table(conn, item, <span class="string">&quot;fuzzy&quot;</span>, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(table_score) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(table_candidate[<span class="number">0</span>]).strip().lower() == pred_value.strip().lower():</span><br><span class="line">                <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + table_column[<span class="number">0</span>], table_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">            <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, number_check(pred_value, candidate[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        table_score, table_column, table_candidate = search_in_table(conn, item, match_method, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(table_score) &gt; <span class="number">0</span>:</span><br><span class="line">            max_score = table_score[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">                <span class="keyword">if</span> number_check(pred_value, table_candidate[<span class="number">0</span>]) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + table_column[<span class="number">0</span>], table_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        database_score, database_table, database_column, database_candidate = search_in_database(conn, item, match_method, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(database_score) &gt; <span class="number">0</span>:</span><br><span class="line">            max_score = database_score[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">                <span class="keyword">if</span> number_check(pred_value, database_candidate[<span class="number">0</span>]) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> database_table[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span> + database_column[<span class="number">0</span>], database_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, number_check(pred_value, candidate[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="pdf-report"><a href="#pdf-report" class="headerlink" title="pdf report"></a>pdf report</h1><ul><li><a href="/files/LLM2SQL/LLM&DB.pdf">Report</a> 更新时间：2024-11-28</li></ul><h1 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h1><ol><li>继续调研相关的文献，看看有没有前人做过的研究。</li><li>调研相关技术例如自动补全，启发式算法等</li><li>简单做一下各个想法的系统框图</li></ol>]]></content>
      
      
      <categories>
          
          <category> Survey </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM2DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研一课程</title>
      <link href="/2024/03/21/%E7%A0%94%E4%B8%80%E8%AF%BE%E7%A8%8B/"/>
      <url>/2024/03/21/%E7%A0%94%E4%B8%80%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="2024-fall-adb"><a href="#2024-fall-adb" class="headerlink" title="2024-fall-adb"></a>2024-fall-adb</h2><ul><li><a href="https://kdelab.ustc.edu.cn/~jpq/courses/adb-cs.html">主页</a></li><li><a href="https://icourse.club/uploads/files/bf34803441e90be13607c1602e1d23d6965a3de0.pdf">adb期末pdf</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/16/2023-02-16-adbs01/">1</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/16/2023-02-16-adbs02/">2</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/17/2023-02-17-adbs03/">3</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/18/2023-02-18-adbs04/">4</a></li></ul><h2 id="2024-fall-算法"><a href="#2024-fall-算法" class="headerlink" title="2024-fall-算法"></a>2024-fall-算法</h2><ul><li><a href="http://home.ustc.edu.cn/~wx309/lecture/alg2025/index.html">主页</a></li><li><a href="https://icourse.club/uploads/files/fd5df2b0f908d8282dba1939864025d316f0a449.txt">算法课程链接</a></li><li><a href="/files/algorithm/fbs.pdf">分布式算法pdf</a></li><li><a href="/files/algorithm/approximation_algorithm.pdf">近似算法pdf</a></li><li><a href="/files/algorithm/probability_alg.ppt">概率算法pdf</a></li></ul><h2 id="2024-fall-组合数学"><a href="#2024-fall-组合数学" class="headerlink" title="2024-fall-组合数学"></a>2024-fall-组合数学</h2><ul><li><a href="/files/math/math.pdf">pdf电子书</a></li></ul><h2 id="2024-fall-并行程序设计"><a href="#2024-fall-并行程序设计" class="headerlink" title="2024-fall-并行程序设计"></a>2024-fall-并行程序设计</h2><ul><li><a href="https://course.ustc.edu.cn/portal">回放</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研一课程 </tag>
            
            <tag> 期末 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
