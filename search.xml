<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cmake</title>
      <link href="/2024/12/09/cmake/"/>
      <url>/2024/12/09/cmake/</url>
      
        <content type="html"><![CDATA[<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><p>project(&lt;name&gt;)：定义项目名称。<br>cmake_minimum_required(VERSION &lt;version&gt;)：指定最低 CMake 版本。<br>add_executable(&lt;name&gt; &lt;sources&gt;)：生成可执行文件。<br>add_library(&lt;name&gt; &lt;sources&gt;)：生成静态或动态库。<br>target_link_libraries(&lt;target&gt; &lt;library&gt;)：为目标链接库。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>labrule</title>
      <link href="/2024/12/09/labrule/"/>
      <url>/2024/12/09/labrule/</url>
      
        <content type="html"><![CDATA[<h1 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h1><h2 id="培养方案"><a href="#培养方案" class="headerlink" title="培养方案"></a>培养方案</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li><a href="/files/%E5%AD%A6%E6%A0%A1%E8%B5%84%E6%96%99/1_%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93.pdf">培养方案</a></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><a href="http://email.ustc.edu.cn/">邮箱</a></li></ul><h2 id="入党"><a href="#入党" class="headerlink" title="入党"></a>入党</h2><h1 id="实验室"><a href="#实验室" class="headerlink" title="实验室"></a>实验室</h1><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h3><ul><li><a href="/files/lab/1.zip">overleaf模板</a></li><li><a href="/files/lab/%E8%9A%82%E8%9A%81%E9%9B%86%E5%9B%A2%E6%8E%A8%E8%8D%90%E5%9B%BD%E9%99%85%E5%AD%A6%E6%9C%AF%E4%BC%9A%E8%AE%AE%E5%92%8C%E6%9C%9F%E5%88%8A%E7%9B%AE%E5%BD%952024.pdf">蚂蚁推荐论文会议</a></li></ul><h3 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h3><ul><li><a href="https://www.overleaf.com/project">overleaf</a></li><li><a href="http://222.195.92.204:1480/users/sign_in">gitlab</a></li><li><a href="http://222.195.92.204:9000/login?redirect_url=/apps/dashboard/">dashboard</a></li><li><a href="http://222.195.92.204:9001/project/6331a217875b0600973dcaa5">实验室overleaf</a></li></ul><h3 id="rule"><a href="#rule" class="headerlink" title="rule"></a>rule</h3><ol><li><div class="note danger simple"><p>离开合肥请假</p></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
            <tag> s4puls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conf</title>
      <link href="/2024/12/06/conf/"/>
      <url>/2024/12/06/conf/</url>
      
        <content type="html"><![CDATA[<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。以下是预先定义的参数，您可以在模板中使用这些参数值：</p><table><thead><tr><th>参数</th><th>描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td align="left">post</td></tr><tr><td>title</td><td>标题</td><td align="left"></td></tr><tr><td>date</td><td>建立日期</td><td align="left">文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td align="left">文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td align="left">true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td align="left"></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td align="left"></td></tr><tr><td>toc_style_simple</td><td>使用更简洁的toc风格</td><td align="left">false</td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td align="left"></td></tr><tr><td>excerpt</td><td>纯文本的页面摘要</td><td align="left"></td></tr><tr><td>disableNunjucks</td><td>启用渲染引擎</td><td align="left">false</td></tr><tr><td>lang</td><td>设置语言</td><td align="left">默认语言</td></tr><tr><td>sticky</td><td>文章置顶</td><td align="left">0</td></tr><tr><td>cover</td><td>文章封面</td><td align="left"></td></tr><tr><td>comments</td><td>显示文章评论模块</td><td align="left">true</td></tr><tr><td>description</td><td>页面描述</td><td align="left"></td></tr><tr><td>toc</td><td>是否显示文章目录</td><td align="left">false</td></tr><tr><td>keywords</td><td>页面关键词</td><td align="left"></td></tr><tr><td>copyright</td><td>显示文章版权模块</td><td align="left">true</td></tr><tr><td>mathjax</td><td>显示mathjax</td><td align="left">false</td></tr><tr><td>katex</td><td>显示katex</td><td align="left">false</td></tr><tr><td>aside</td><td>显示侧边栏</td><td align="left">true</td></tr><tr><td>aplayer</td><td>在该页面下加载aplayer的js和css</td><td align="left">false</td></tr><tr><td>highlight_shrink</td><td>代码框是否展开</td><td align="left">false</td></tr><tr><td>copyright_author: xxxx</td><td></td><td align="left"></td></tr><tr><td>copyright_author_href: <a href="https://xxxxxx.com/">https://xxxxxx.com</a></td><td></td><td align="left"></td></tr><tr><td>copyright_url: <a href="https://xxxxxx.com/">https://xxxxxx.com</a></td><td></td><td align="left"></td></tr><tr><td>copyright_info: 此文章版權歸 xxxxx 所有，如有轉載，請註明來自原作者</td><td></td><td align="left"></td></tr></tbody></table><h1 id="需要完善的部分"><a href="#需要完善的部分" class="headerlink" title="需要完善的部分"></a>需要完善的部分</h1><ul><li>评论功能</li><li>在线聊天功能</li><li>分析功能</li><li>在线修改功能</li><li>photos</li><li>music</li><li>movies</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 主页配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp</title>
      <link href="/2024/12/05/cpp/"/>
      <url>/2024/12/05/cpp/</url>
      
        <content type="html"><![CDATA[<h2 id="basic-grammar-cpp-11"><a href="#basic-grammar-cpp-11" class="headerlink" title="basic grammar cpp 11"></a>basic grammar cpp 11</h2><ul><li><a href="https://github.com/Light-City/CPlusPlusThings?tab=readme-ov-file#">Cpp那些事</a></li><li><a href="https://github.com/TheAlgorithms/C-Plus-Plus?tab=readme-ov-file">The Algorithms of cpp</a> Cpp的一些算法</li><li><a href="https://github.com/progschj/ThreadPool">Tread Pool</a> c11</li></ul><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><ul><li><a href="https://github.com/yuesong-feng/30dayMakeCppServer/tree/main">30 days of web server</a> 30天写一个web服务器</li><li><a href="https://github.com/practical-tutorials/project-based-learning">projects of mutilanguage</a> cpp编译器等</li><li><a href="https://github.com/sylar-yin/sylar">sylar- a web server</a> 很全面的cpp 服务器项目</li><li><a href="https://github.com/balloonwj/CppGuide?tab=readme-ov-file">CppGuide</a> 全面的CPP教程包括projects实践</li><li><a href="https://github.com/qinguoyi/TinyWebServer">tinywebserver</a> 一个轻量级的web服务器</li><li><a href="https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System">a easy os</a> 一个简单的操作系统</li><li><a href="https://link.zhihu.com/?target=https://github.com/aristocratos/btop">btop</a> 资源管理工具</li><li><a href="https://github.com/SerenityOS/serenity">make a computer operating system</a> 一个操作系统 hard</li></ul><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><ul><li><a href="https://github.com/gabime/spdlog">a logging system</a> 一个日志系统</li><li><a href="https://github.com/Alinshans/MyTinySTL">My STL</a> 一个stl库</li></ul><h2 id="more-projects"><a href="#more-projects" class="headerlink" title="more projects"></a>more projects</h2><ul><li><a href="https://www.nowcoder.com/discuss/614479695123316736">more</a></li><li><a href="https://link.zhihu.com/?target=https://github.com/jobbole/awesome-cpp-cn">more</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> webserver </tag>
            
            <tag> threadpool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM2DB</title>
      <link href="/2024/12/03/LLM2DB/"/>
      <url>/2024/12/03/LLM2DB/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM2CSQL"><a href="#LLM2CSQL" class="headerlink" title="LLM2CSQL"></a>LLM2CSQL</h1><ul><li><a href="/files/LLM2SQL/NL2SQL-VLDB2024.pdf">ZNL2SQL</a></li><li><a href="/files/LLM2SQL/NL2SQL360-VLDB2024.pdf">NL2SQL-VLDB2024</a></li><li><a href="/files/LLM2SQL/query_rewrite.pdf">queryrewrite</a></li></ul><h1 id="thought"><a href="#thought" class="headerlink" title="thought"></a>thought</h1><p>看完上述文章的思考，如何将LLM2SQL的思路迁移到LLM2CYPHER上？</p><h3 id="LLM2CYPHER"><a href="#LLM2CYPHER" class="headerlink" title="LLM2CYPHER"></a>LLM2CYPHER</h3><ol><li><strong>用小模型来将自然语言转换为规范的查询自然语言增加转换准确性</strong></li></ol><p>查询目标：n1,n2,n3 &#x2F;&#x2F;查询中的实体<br>查询关系：n1-r1-n2 ….. &#x2F;&#x2F;查询中实体的关系<br>返回结果：result &#x2F;&#x2F;查询语句中的结果</p><p>例如：小丽的朋友的朋友有哪些</p><ul><li>查询目标：小丽，小丽的朋友，小丽的朋友的朋友</li><li>查询关系：小丽-朋友-小丽的朋友，小丽的朋友-朋友-小丽的朋友的朋友</li><li>返回结果：小丽的朋友的朋友</li></ul><ol start="2"><li><p><strong>多专家评判机制</strong><br>使用多个大模型专家进行nl2cypher，每个专家生成的cypher和原先的自然语言一起交给标号i+1的大模型专家，让其评判正确率，并且自己在根据自然语言生成cypher，与前一个专家转交的cypher进行比对，给予每个大模型专家不同的权重，当每个大模型一致认为正确时，转换完成</p></li><li><p><strong>自适应学习机制</strong><br>添加自适应学习机制，并且给与不同专家不同的权重，例如某个专业侧重于整体结构，或者是数据类型等</p></li><li><p><strong>物化视图缓存机制</strong><br>给上述的方案增添一种类似物化视图的结构，用来保存经过小模型转换的标准自然语言转换为的认为正确的cypher。在每次nltocypher的时候:</p></li></ol><ul><li>先经过小模型的转换</li><li>去查看物化视图中是否有保存</li><li>若有则可以直接使用，或者取出让大模型专家进行评判</li><li>若正确率低则需重新生成，否则则认为正确</li></ul><p>可以对自然语言进行模糊匹配，找出结构相同的自然语言。比如”有多少奥迪车辆”和”有多少宝马车辆”很类似，可以使用前面的缓存交给专门进行标签匹配的大模型专家进行修改。</p><ol start="5"><li><p><strong>强化学习优化</strong><br>使用强化学习来自适应改变大语言模型专家的权重，或者根据执行结果反馈给专家，让其调整权重。</p></li><li><p><strong>标签处理专家</strong><br>cypher的标签很重要，可以使用不同的大模型处理不同的部分，处理标签，具体的参数。</p></li></ol><h3 id="Rewrite-Cypher"><a href="#Rewrite-Cypher" class="headerlink" title="Rewrite Cypher"></a>Rewrite Cypher</h3><ol><li>因为cypher的连接顺序会十分影响查询效率，所以需要对cypher进行重写，例如：</li></ol><ul><li>原cypher：MATCH (n1)-[r1]-&gt;(n2)-[r2]-&gt;(n3) RETURN n1,n2,n3</li><li>重写cypher：MATCH (n3)&lt;-[r2]-(n2)&lt;-[r1]-(n1) RETURN n1,n2,n3</li></ul><ol start="2"><li>如何判断cypher的连接顺序是否合理？</li></ol><ul><li>使用图数据库的执行引擎，执行cypher，并记录执行时间，选择执行时间最短的连接顺序&#x2F;问题在于需要执行cypher，才能知道执行时间，不能在转换阶段就进行判断</li><li>使用强化学习预训练,在转换阶段就进行判断</li><li>使用启发式算法，根据cypher的结构，判断连接顺序是否合理。启发式算法是一种在合理时间内找到较好解决方案的方法，它不一定能找到最优解，但可以找到接近最优解的答案。在cypher重写中，可以考虑以下启发式规则：<ol><li>选择性原则：优先处理可以快速缩小结果集的条件，如带有索引或约束的节点</li><li>局部性原则：尽量将相关的操作放在一起处理，减少数据在内存中的移动</li><li>基数估计：根据节点和关系的数量来估计中间结果的大小，选择产生较小中间结果的执行顺序</li><li>模式匹配：识别常见的查询模式并应用已知的优化策略<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CypherRewriter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, graph_stats</span>):</span><br><span class="line">        <span class="comment"># 图数据库统计信息，包含节点标签和关系类型的基数信息</span></span><br><span class="line">        <span class="variable language_">self</span>.graph_stats = graph_stats</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">estimate_selectivity</span>(<span class="params">self, pattern</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;估算模式的选择性（越小越好）&quot;&quot;&quot;</span></span><br><span class="line">        node_label = pattern.get(<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        relationship = pattern.get(<span class="string">&#x27;relationship&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 从统计信息中获取基数</span></span><br><span class="line">        node_cardinality = <span class="variable language_">self</span>.graph_stats[<span class="string">&#x27;nodes&#x27;</span>].get(node_label, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">        rel_cardinality = <span class="variable language_">self</span>.graph_stats[<span class="string">&#x27;relationships&#x27;</span>].get(relationship, <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算选择性分数（越小表示越具有选择性）</span></span><br><span class="line">        <span class="keyword">return</span> (node_cardinality + rel_cardinality) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rewrite_cypher</span>(<span class="params">self, cypher_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重写Cypher查询以优化执行顺序&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 解析查询模式</span></span><br><span class="line">        patterns = <span class="variable language_">self</span>._parse_patterns(cypher_query)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算每个模式的选择性</span></span><br><span class="line">        pattern_scores = [</span><br><span class="line">            (pattern, <span class="variable language_">self</span>.estimate_selectivity(pattern))</span><br><span class="line">            <span class="keyword">for</span> pattern <span class="keyword">in</span> patterns</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据选择性排序（选择性高的优先）</span></span><br><span class="line">        sorted_patterns = <span class="built_in">sorted</span>(pattern_scores, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重建优化后的查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._rebuild_query(sorted_patterns, cypher_query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_patterns</span>(<span class="params">self, cypher_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析Cypher查询中的模式</span></span><br><span class="line"><span class="string">        示例: MATCH (n:Person)-[r:KNOWS]-&gt;(m:Person) </span></span><br><span class="line"><span class="string">        会被解析为多个模式组件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 这里需要实现具体的解析逻辑</span></span><br><span class="line">        <span class="comment"># 返回解析后的模式列表</span></span><br><span class="line">        patterns = []</span><br><span class="line">        <span class="comment"># ... 解析逻辑 ...</span></span><br><span class="line">        <span class="keyword">return</span> patterns</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_rebuild_query</span>(<span class="params">self, sorted_patterns, original_query</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据排序后的模式重建查询&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 重建优化后的查询字符串</span></span><br><span class="line">        <span class="comment"># ... 重建逻辑 ...</span></span><br><span class="line">        <span class="keyword">return</span> optimized_query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">graph_stats = &#123;</span><br><span class="line">    <span class="string">&#x27;nodes&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Person&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&#x27;Company&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;relationships&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;KNOWS&#x27;</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="string">&#x27;WORKS_AT&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewriter = CypherRewriter(graph_stats)</span><br><span class="line">query = <span class="string">&quot;MATCH (n:Person)-[r:KNOWS]-&gt;(m:Person)-[w:WORKS_AT]-&gt;(c:Company) RETURN n,m,c&quot;</span></span><br><span class="line">optimized_query = rewriter.rewrite_cypher(query)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="将自动补全技术融入到LLM2SQL中提高可信度"><a href="#将自动补全技术融入到LLM2SQL中提高可信度" class="headerlink" title="将自动补全技术融入到LLM2SQL中提高可信度"></a>将自动补全技术融入到LLM2SQL中提高可信度</h3><p>在转换阶段生成了类似的模板之后，可以使用自动补全的算法来判断是否数据库中含有相应的结构，如果没有那么它肯定是错误的，若有也不能说是正确的，但是可信度会提高很多。<br>当然因为会提供给大模型Scheme，所以不需要真的使用数据库来进行自动补全，只需要根据Scheme进行判断即可。</p><h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><h2 id="ZNL2SQL"><a href="#ZNL2SQL" class="headerlink" title="ZNL2SQL"></a>ZNL2SQL</h2><p>-<a href="/files/LLM2SQL/ZNL2SQL-VLDB2024.pptx">ZNL2SQL</a></p><h2 id="report"><a href="#report" class="headerlink" title="report"></a>report</h2><p>-<a href="/files/LLM2SQL/LLM&DB.pptx">Report</a></p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ppt中的多级匹配函数实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value_match</span>(<span class="params">db, question, gold_sql, pred_sql, table, column, pred_value, match_method, k</span>):</span><br><span class="line">    item = Item(db, table, column, pred_value)</span><br><span class="line">    pred_value = <span class="built_in">str</span>(pred_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(item.db) <span class="keyword">as</span> conn:</span><br><span class="line">        conn.text_factory = <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">        score, candidate = search_in_column(conn, item, match_method, k)</span><br><span class="line">        max_score = score[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(candidate[<span class="number">0</span>]).strip().lower() == pred_value.strip().lower():</span><br><span class="line">            <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        table_score, table_column, table_candidate = search_in_table(conn, item, <span class="string">&quot;fuzzy&quot;</span>, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(table_score) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(table_candidate[<span class="number">0</span>]).strip().lower() == pred_value.strip().lower():</span><br><span class="line">                <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + table_column[<span class="number">0</span>], table_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">            <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, number_check(pred_value, candidate[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        table_score, table_column, table_candidate = search_in_table(conn, item, match_method, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(table_score) &gt; <span class="number">0</span>:</span><br><span class="line">            max_score = table_score[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">                <span class="keyword">if</span> number_check(pred_value, table_candidate[<span class="number">0</span>]) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + table_column[<span class="number">0</span>], table_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        database_score, database_table, database_column, database_candidate = search_in_database(conn, item, match_method, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(database_score) &gt; <span class="number">0</span>:</span><br><span class="line">            max_score = database_score[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> max_score &gt; <span class="number">0.65</span>:</span><br><span class="line">                <span class="keyword">if</span> number_check(pred_value, database_candidate[<span class="number">0</span>]) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, <span class="literal">None</span></span><br><span class="line">                <span class="keyword">return</span> database_table[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span> + database_column[<span class="number">0</span>], database_candidate[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> table + <span class="string">&#x27;.&#x27;</span> + column, number_check(pred_value, candidate[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="pdf-report"><a href="#pdf-report" class="headerlink" title="pdf report"></a>pdf report</h1><ul><li><a href="/files/LLM2SQL/LLM&DB.pdf">Report</a> 更新时间：2024-11-28</li></ul><h1 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h1><ol><li>继续调研相关的文献，看看有没有前人做过的研究。</li><li>调研相关技术例如自动补全，启发式算法等</li><li>简单做一下各个想法的系统框图</li></ol>]]></content>
      
      
      <categories>
          
          <category> Survey </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM2DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研一课程</title>
      <link href="/2024/03/21/%E7%A0%94%E4%B8%80%E8%AF%BE%E7%A8%8B/"/>
      <url>/2024/03/21/%E7%A0%94%E4%B8%80%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-fall-adb"><a href="#2024-fall-adb" class="headerlink" title="2024-fall-adb"></a>2024-fall-adb</h1><ul><li><a href="https://kdelab.ustc.edu.cn/~jpq/courses/adb-cs.html">主页</a></li><li><a href="https://icourse.club/uploads/files/bf34803441e90be13607c1602e1d23d6965a3de0.pdf">adb期末pdf</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/16/2023-02-16-adbs01/">1</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/16/2023-02-16-adbs02/">2</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/17/2023-02-17-adbs03/">3</a></li><li><a href="https://cslijt.github.io/LiJT-Daily/2023/02/18/2023-02-18-adbs04/">4</a></li></ul><h1 id="2024-fall-算法"><a href="#2024-fall-算法" class="headerlink" title="2024-fall-算法"></a>2024-fall-算法</h1><ul><li><a href="http://home.ustc.edu.cn/~wx309/lecture/alg2025/index.html">主页</a></li><li><a href="https://icourse.club/uploads/files/fd5df2b0f908d8282dba1939864025d316f0a449.txt">算法课程链接</a></li><li><a href="/files/algorithm/fbs.pdf">分布式算法pdf</a></li><li><a href="/files/algorithm/approximation_algorithm.pdf">近似算法pdf</a></li><li><a href="/files/algorithm/probability_alg.ppt">概率算法pdf</a></li></ul><h1 id="2024-fall-组合数学"><a href="#2024-fall-组合数学" class="headerlink" title="2024-fall-组合数学"></a>2024-fall-组合数学</h1><ul><li><a href="/files/math/math.pdf">pdf电子书</a></li></ul><h1 id="2024-fall-并行程序设计"><a href="#2024-fall-并行程序设计" class="headerlink" title="2024-fall-并行程序设计"></a>2024-fall-并行程序设计</h1><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><ul><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AF%BE%E7%A8%8B%E8%AE%B2%E4%B9%89.zip">课程ppt.zip</a></li><li><a href="https://course.ustc.edu.cn/portal">回放</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/cuda1.pdf">cuda1</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/cuda2.pdf">cuda2</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%B9%B6%E8%A1%8C%E7%AE%97%E6%B3%95%E5%AE%9E%E8%B7%B5.pdf">教材</a></li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="纸质作业"><a href="#纸质作业" class="headerlink" title="纸质作业"></a>纸质作业</h3><ul><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex-24.rar">纸质作业</a><div class="note danger simple"><p>deadline 2024-12-13</p></div></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/ex-24-1.pdf">ex1</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/ex-24-2.pdf">ex2</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/ex-24-3.pdf">ex3</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/ex-24-4.pdf">ex4</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/ex-24-5.pdf">ex5</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/ex/%E5%8D%95%E6%A8%A1%E5%8F%98%E6%8D%A2.docx">ex6</a></li></ul><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><ul><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%8A%E6%9C%BA%E6%8C%87%E5%8D%97.pdf">实验1</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/mpi-lab.pdf">mpi</a><div class="note danger simple"><p>deadline 2024-12-28</p></div></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1CUDA%E5%AE%9E%E9%AA%8C.pdf">cuda实验pdf</a></li><li><a href="/files/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/cuda%E5%AE%9E%E9%AA%8C%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81.tar.gz">cuda实验代码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研一课程 </tag>
            
            <tag> 期末 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2024/01/01/test/"/>
      <url>/2024/01/01/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><h1 id="相册图库"><a href="#相册图库" class="headerlink" title="相册图库"></a>相册图库</h1><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>关于漫威的图片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><h1 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h1><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-items">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</div>    </div><h1 id="Tag-hide"><a href="#Tag-hide" class="headerlink" title="Tag-hide"></a>Tag-hide</h1><span class="hide-inline"><button type="button" class="hide-button" style="background-color: bg;color: color">display  </button><span class="hide-content">content</span></span><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">闪</span></span></p><h1 id="lable"><a href="#lable" class="headerlink" title="lable"></a>lable</h1><p>臣亮言：<mark class="hl-label default">先帝</mark>创业未半，而<mark class="hl-label blue">中道崩殂</mark>。今天下三分，<mark class="hl-label pink">益州疲敝</mark>，此诚<mark class="hl-label red">危急存亡之秋</mark>也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark>，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark>、<mark class="hl-label green">犯科</mark>，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
